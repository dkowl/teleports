//DO NOT EDIT - Autogenerated file
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Sirenix.OdinInspector;
using Teleports.Utils;

[System.Serializable]
public partial class WeaponData : IDeepCopyable {

	[SerializeField, InlineProperty, GUIColor(1, 0.5f, 0.5f)] private Attribute damage;
	[SerializeField, InlineProperty, GUIColor(1, 0.5f, 0.5f)] private Attribute damageSpread;
	[SerializeField, InlineProperty, GUIColor(0.5f, 0.5f, 1)] private Attribute reach;
	[SerializeField, InlineProperty, GUIColor(0.5f, 1, 0.5f)] private Attribute castTime;
	[SerializeField, InlineProperty, GUIColor(0.5f, 1, 0.5f)] private Attribute afterCastLockTime;
	[SerializeField, InlineProperty, GUIColor(1, 0.5f, 0.5f)] private Attribute strRequired;
	[SerializeField, InlineProperty, GUIColor(1, 0.5f, 0.5f)] private Attribute strDamageBonus;
	[SerializeField, InlineProperty, GUIColor(1, 0.5f, 0.5f)] private Attribute strSpeedBonus;
	[SerializeField, InlineProperty, GUIColor(1, 0.5f, 0.5f)] private Attribute strReachBonus;
	[SerializeField, InlineProperty, GUIColor(0.5f, 1, 0.5f)] private Attribute dexRequired;
	[SerializeField, InlineProperty, GUIColor(0.5f, 1, 0.5f)] private Attribute dexDamageBonus;
	[SerializeField, InlineProperty, GUIColor(0.5f, 1, 0.5f)] private Attribute dexSpeedBonus;
	[SerializeField, InlineProperty, GUIColor(0.5f, 1, 0.5f)] private Attribute dexReachBonus;
	[SerializeField, InlineProperty, GUIColor(0.5f, 0.5f, 1)] private Attribute intRequired;
	[SerializeField, InlineProperty, GUIColor(0.5f, 0.5f, 1)] private Attribute intDamageBonus;
	[SerializeField, InlineProperty, GUIColor(0.5f, 0.5f, 1)] private Attribute intSpeedBonus;
	[SerializeField, InlineProperty, GUIColor(0.5f, 0.5f, 1)] private Attribute intReachBonus;


	public WeaponData(WeaponData other){
		damage = new Attribute(other.damage);
		damageSpread = new Attribute(other.damageSpread);
		reach = new Attribute(other.reach);
		castTime = new Attribute(other.castTime);
		afterCastLockTime = new Attribute(other.afterCastLockTime);
		strRequired = new Attribute(other.strRequired);
		strDamageBonus = new Attribute(other.strDamageBonus);
		strSpeedBonus = new Attribute(other.strSpeedBonus);
		strReachBonus = new Attribute(other.strReachBonus);
		dexRequired = new Attribute(other.dexRequired);
		dexDamageBonus = new Attribute(other.dexDamageBonus);
		dexSpeedBonus = new Attribute(other.dexSpeedBonus);
		dexReachBonus = new Attribute(other.dexReachBonus);
		intRequired = new Attribute(other.intRequired);
		intDamageBonus = new Attribute(other.intDamageBonus);
		intSpeedBonus = new Attribute(other.intSpeedBonus);
		intReachBonus = new Attribute(other.intReachBonus);
	}

	public object DeepCopy(){
		return new WeaponData(this);
	}

	public Attribute GetAttribute(AttributeType type)
	{
		switch(type)
		{
			case AttributeType.Damage:
				return damage;
			case AttributeType.DamageSpread:
				return damageSpread;
			case AttributeType.Reach:
				return reach;
			case AttributeType.CastTime:
				return castTime;
			case AttributeType.AfterCastLockTime:
				return afterCastLockTime;
			case AttributeType.StrRequired:
				return strRequired;
			case AttributeType.StrDamageBonus:
				return strDamageBonus;
			case AttributeType.StrSpeedBonus:
				return strSpeedBonus;
			case AttributeType.StrReachBonus:
				return strReachBonus;
			case AttributeType.DexRequired:
				return dexRequired;
			case AttributeType.DexDamageBonus:
				return dexDamageBonus;
			case AttributeType.DexSpeedBonus:
				return dexSpeedBonus;
			case AttributeType.DexReachBonus:
				return dexReachBonus;
			case AttributeType.IntRequired:
				return intRequired;
			case AttributeType.IntDamageBonus:
				return intDamageBonus;
			case AttributeType.IntSpeedBonus:
				return intSpeedBonus;
			case AttributeType.IntReachBonus:
				return intReachBonus;
			default:
				return null;
		}
	}

    public void ModifyAttribute(AttributeType type, float bonus, float multiplier)
	{
		GetAttribute(type).Modify(bonus, multiplier);
	}

	public float Damage => damage.Value;
	public float DamageSpread => damageSpread.Value;
	public float Reach => reach.Value;
	public float CastTime => castTime.Value;
	public float AfterCastLockTime => afterCastLockTime.Value;
	public float StrRequired => strRequired.Value;
	public float StrDamageBonus => strDamageBonus.Value;
	public float StrSpeedBonus => strSpeedBonus.Value;
	public float StrReachBonus => strReachBonus.Value;
	public float DexRequired => dexRequired.Value;
	public float DexDamageBonus => dexDamageBonus.Value;
	public float DexSpeedBonus => dexSpeedBonus.Value;
	public float DexReachBonus => dexReachBonus.Value;
	public float IntRequired => intRequired.Value;
	public float IntDamageBonus => intDamageBonus.Value;
	public float IntSpeedBonus => intSpeedBonus.Value;
	public float IntReachBonus => intReachBonus.Value;

	public enum AttributeType {
		Damage,
		DamageSpread,
		Reach,
		CastTime,
		AfterCastLockTime,
		StrRequired,
		StrDamageBonus,
		StrSpeedBonus,
		StrReachBonus,
		DexRequired,
		DexDamageBonus,
		DexSpeedBonus,
		DexReachBonus,
		IntRequired,
		IntDamageBonus,
		IntSpeedBonus,
		IntReachBonus,
	}

}
	