//DO NOT EDIT - Autogenerated file
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Sirenix.OdinInspector;
using Teleports.Utils;

[System.Serializable]
public partial class UnitAttributesData : IDeepCopyable {

	[SerializeField] private Attribute strength;
	[SerializeField] private Attribute dexterity;
	[SerializeField] private Attribute intelligence;
	[SerializeField] private Attribute size;
	[SerializeField] private Attribute height;
	[SerializeField] private Attribute healthPoints;
	[SerializeField] private Attribute armor;
	[SerializeField] private Attribute regeneration;
	[SerializeField] private Attribute movementSpeed;
	[SerializeField] private Attribute rotationSpeed;
	[SerializeField] private Attribute reach;
	[SerializeField] private Attribute viewRange;


	public UnitAttributesData(UnitAttributesData other){
		strength = new Attribute(other.strength);
		dexterity = new Attribute(other.dexterity);
		intelligence = new Attribute(other.intelligence);
		size = new Attribute(other.size);
		height = new Attribute(other.height);
		healthPoints = new Attribute(other.healthPoints);
		armor = new Attribute(other.armor);
		regeneration = new Attribute(other.regeneration);
		movementSpeed = new Attribute(other.movementSpeed);
		rotationSpeed = new Attribute(other.rotationSpeed);
		reach = new Attribute(other.reach);
		viewRange = new Attribute(other.viewRange);
	}

	public object DeepCopy(){
		return new UnitAttributesData(this);
	}

	public Attribute GetAttribute(AttributeType type)
	{
		switch(type)
		{
			case AttributeType.Strength:
				return strength;
			case AttributeType.Dexterity:
				return dexterity;
			case AttributeType.Intelligence:
				return intelligence;
			case AttributeType.Size:
				return size;
			case AttributeType.Height:
				return height;
			case AttributeType.HealthPoints:
				return healthPoints;
			case AttributeType.Armor:
				return armor;
			case AttributeType.Regeneration:
				return regeneration;
			case AttributeType.MovementSpeed:
				return movementSpeed;
			case AttributeType.RotationSpeed:
				return rotationSpeed;
			case AttributeType.Reach:
				return reach;
			case AttributeType.ViewRange:
				return viewRange;
			default:
				return null;
		}
	}

    public void ModifyAttribute(AttributeType type, float bonus, float multiplier)
	{
		GetAttribute(type).Modify(bonus, multiplier);
	}

	public float Strength => strength.Value;
	public float Dexterity => dexterity.Value;
	public float Intelligence => intelligence.Value;
	public float Size => size.Value;
	public float Height => height.Value;
	public float HealthPoints => healthPoints.Value;
	public float Armor => armor.Value;
	public float Regeneration => regeneration.Value;
	public float MovementSpeed => movementSpeed.Value;
	public float RotationSpeed => rotationSpeed.Value;
	public float Reach => reach.Value;
	public float ViewRange => viewRange.Value;

	public enum AttributeType {
		Strength,
		Dexterity,
		Intelligence,
		Size,
		Height,
		HealthPoints,
		Armor,
		Regeneration,
		MovementSpeed,
		RotationSpeed,
		Reach,
		ViewRange,
	}

}
	